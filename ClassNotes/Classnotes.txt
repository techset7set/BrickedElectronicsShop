"Unit" 2
2/20/2017
    We followed ch. 3 in the textbook.
    
    rails generate controller StaticPages <list of actions>
        SPController inherits from the application controller
    
    .erb - html file that can have embedded ruby
        indicated with <%= ... %>
        
    testing
        code: 200 is a successful response
        
    test driven development (TDD)
        writing tests before the code.
        KATA
        Good for:
            Security code
            Refactoring code - Internal (ONLY) changes to code
    
2/22/2017
    Continuing Ch. 3...
    
    More TDD
        Added select tests to find an HTML element with certain text in it
        Can also add Ruby to the testing file (Can create variables to remove redundant code)
        
    FOR PROJECT (By next week)
        -Homepage exists w/ basic content about prod/service
        -Navigation links exist
        -Main layout is visible
        -Basic styling is available
        -Rails framework is utilized
        
2/27/2017
    Ruby Syntax
        
        yield/provide
            Allows for information to be passed between pages.
            
        Can create methods in "helpers" (aka Utilities / Utitlity class)
        
        module - Basically a public helper.
        full_title(page_title = "")
            This allows for a default parameter value.
            
        Brackets are inferred - close with "end"
        
        ? signifies a boolean return type in a method - just a convention, has no power
    
    yield/provide
        Allows for information to be passed between pages.
        
3/1/2017
    Test info(Ruby):
    Be prepared to know about interpolation, concatenation, difference of single/double quotes
        Object (everything is object)
        passing messages (printing to screen, I think?)
        Boolean methods end with '?'
        Methods ending in '!' mutate the data
        if, elif, else
        minimal parenthesis
        method chaining
        alternate (self-contained) if statements [AKA One liners]
        don't /need/ returns
        Arrays - Initialization(ranges) - Stack -> Push/Pop
        Ranges - Parenths if using a method on range
        Hashes - (1) user = {"firstname"=>"tanner",....}
            Hashes extremely common in rails
            (2) user = { :firstName => "tanner",... }
            ':' indicates a symbol - an uninstantiable, immutable object - Symbol class
            (3) user = { firstName: "tanner",... }
                Now that its set as a symbol, the symbol will reference it -> user[:firstname]
                Can init a spot in a hash, without its pre-existance
                Hashes are nestable -> params[:user][:firstname]
        Blocks
            user.each { |key, value| puts "#{key} has value #{value}" }
            
            user.each do |key, value|
                puts "#{key} has value #{value}"
            end
            
        Inspect method
            -Gives a literal representation of the object
            puts (1..5).to_a  VS  puts (1..5).to_a.inspect
         
    Rails Console
        Stop command - ctrl+c
        Exit - "exit" or ctrl+d (careful with ctrl+d)
        
        Everything in Ruby is an object.
        
        Ruby always returns something.
        
        String Interpolation
            You can put a variable in a string by doing:
                "#{var_name} Deese"
        
        puts - System.out.println()
        print - System.out.print()
        
        esc sequences are similar to Java
        
        "" - Indicates a String interpretation
        '' - Indicates a String literal  --Literals don't allow for Interpolation
        
        return is inferred (like Scala), however it can be written expressly
            --Convention is to make as little clutter as possible
        
        && || !
        
        Parenthesis is optional(?) for things like if/elif statements
        
        Everything is an object, so everything has .to_s  (.toString())
        Methods can be chained:
            1.to_s.empty?
            
        nil is Java's null
            *.nil? --Null check
        
        Inline ii/unless
            <Line of code to maybe exe> if/unless <condition>
            can do unless instead of if(!())
        
        Two false objects (They return false)
            nil
            false  --!!false -> the string false returns true lol
            
            Not zero -- !!0 ret true
            
        Method declaration
            def <name>(<params>)
                #params can be assigned a default value if they aren't provided
            end
        
        Ranges
            (0..9).to_a gives an array of ints from n1 to n2
            You can even access a range if array elements -> a[2..4]
            
        Hashes
            Key/Value pair
            
            user = {}  --creates empty hash
            user = {"firstname" => "tanner"} --"Hash rockets"
            user["firstname"]="tanner"
            
        Blocks
            All four are the exact same and perform this (scala-like) pseudocode
                [1,2,3,4,5].foreach( i => println(2*i))
            (1..5).each { |i| puts 2 * i }
            
            for i in 1..5
                puts 2*i
                end
            
            (1..5).each do |i|
                puts 2*i
                end
                
            (1..5).map { |i| i*2 }
            
            In those, i is a block variable, you don't need a []-variable

3/1/2017
    Test info(Ruby):
    Be prepared to know about interpolation, concatenation, difference of single/double quotes
        Object (everything is object)
        passing messages (printing to screen, I think?)
        Boolean methods end with '?'
        Methods ending in '!' mutate the data
        if, elif, else
        minimal parenthesis
        method chaining
        alternate (self-contained) if statements [AKA One liners]
        don't /need/ returns
        Arrays - Initialization(ranges) - Stack -> Push/Pop
        Ranges - Parenths if using a method on range
        Hashes - (1) user = {"firstname"=>"tanner",....}
            Hashes extremely common in rails
            (2) user = { :firstName => "tanner",... }
            ':' indicates a symbol - an uninstantiable, immutable object - Symbol class
            (3) user = { firstName: "tanner",... }
                Now that its set as a symbol, the symbol will reference it -> user[:firstname]
                Can init a spot in a hash, without its pre-existance
                Hashes are nestable -> params[:user][:firstname]
        Blocks
            user.each { |key, value| puts "#{key} has value #{value}" }
            
            user.each do |key, value|
                puts "#{key} has value #{value}"
            end
            
        Inspect method
            -Gives a literal representation of the object
            puts (1..5).to_a  VS  puts (1..5).to_a.inspect
            
            
    --End test info/review
    
    Swizzling - Creating methods for a pre-existing class
    class String
        def palindrome?
            self == self.reverse
            end
        end
    --------
    "asdfsadfsafa".palindrome?
    
    
    class User
        attr_accessor :name, :email
        
        def initialize(attributes = {})
            @name = attributes[:name]
            @email = attributes[:email]
            # '@' makes the variable global
        end
    end
        
        'require' keyword
        
        
        <%= >  -> return value
        
3/13/2017
    Ruby Assets Pipeline - 
        app/assets/images
        
    Manifest files
        (Like how stylesheets work (application is loaded after any css file in same folder -> into giant css file)
    
    Preprocessing
        renaming extensions easily
        foobar.js.erb.coffee
    
    Image tag for ruby
    <%= link_to image_tag("rails.png", alt:"Rails logo"), 'http://rubyonrails.org/'%>
    
    Bootstrap
        @import "bootstrap-sprocket"; @import "bootstrap";
        
    Application.html.erb
        <%= yield %>
        Being able to do site-wide header/footer
        
        Partial files.  "_*.html.erb"
        <%= render html: "layouts/*.html.erb"  #If in layouts folder will current dir is views %>
        
    scss
        Extension of css
        allows for variables -> $variable_name
            $light_grey: #777
    
    Routes.rb
        Context routes
        DevOps
        
        The following are the same, but the second provides another variable
            get 'pages#help'
            get '/help', to: 'static_pages#help'
        
            help_path, help_url
            
    Integration Tests
    
    |           |                   |               |
    |   Rails   |   -   -   -   -   |   Salesforce  |
    |           |                   |               |
        FormSubmit |
        
        site_layout_test.rb
        require 'test_helper'
        
        class SiteLayoutTest < ActionDispatch::IntegrationTest
            test "layout links" do
                get root_path
                assert_template 'static_pages/home'
                assert_select "a[href=?]", root_path, count:2
                assert_select "a[href=]", help_path
            end
        end
        
    ------------------------------------------------------------------------------------        
    Test review (7 days, monday)
        Routes file
            Know how to type: root route & rest-type routes
            
        Good reasons to/not use TDD
        
        Familiar with helper files
        
        Familar with partials ("_header.html.rb")
        
        Ruby
            What is object / How Ruby treats objects / what is returned by what
            Console - specifically loading classes
                
            String concat & interpolation
            Know how to write a block
            
            Ruby structues -> Array, Hashes, Ranges
            
        Understand asset pipeline
            path, vendor, lib
            
        sass format
            brackets, variables
            
            
            
    :blah is a symbol
    
    blah: is a hash
    
    

3/15/2017
    Why use model / DB?
        Persistence (saving data long term)
        Memory is volatile
    
    need a route to the DB
        resources :users
        
    "rails routes" command\
    
    rails generate model <name> <schema> -> creates migration file -> rails db:migrate
        also has to be run on heroku
        remember Ruby symbols -> :-----
        
    rails console --sandbox
    
    Add validation to the model!
        - esp. passwords, email regex
        
    rails generate migration add_index -> creates migration file -> adds index to a table for an index, which will speed up searches for that attribute
    
    rails generate migration add_password password digest:string
    
    
    make model
    migrate
    add validation
    test
    make controller
    test
    views
    html
    
    scoped/global variables
    
    routes
    
    3rd-party libraries
    
